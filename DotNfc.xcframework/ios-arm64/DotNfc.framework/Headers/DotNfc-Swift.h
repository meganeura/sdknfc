// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef DOTNFC_SWIFT_H
#define DOTNFC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DotNfc",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// Access Control protocol
typedef SWIFT_ENUM_NAMED(NSInteger, DOTAccessControlProtocol, "AccessControlProtocol", open) {
/// Basic Access Control
  DOTAccessControlProtocolBac = 0,
/// Password Authenticated Connection Establishment
  DOTAccessControlProtocolPace = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DOTActiveAuthenticationStatus, "ActiveAuthenticationStatus", open) {
/// Travel document has passed the Active Authentication.
  DOTActiveAuthenticationStatusSuccess = 0,
/// Travel document has not passed the Active Authentication.
  DOTActiveAuthenticationStatusFailed = 1,
/// Active Authentication is not supported for the travel document.
  DOTActiveAuthenticationStatusNotSupported = 2,
};

@class NSString;

/// Contents of DG12 - Additional document details.
SWIFT_CLASS_NAMED("AdditionalDocumentDetails") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTAdditionalDocumentDetails : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable issuingAuthority;
@property (nonatomic, readonly, copy) NSString * _Nullable dateOfIssue;
@property (nonatomic, readonly, copy) NSString * _Nullable endorsementsOrObservations;
@property (nonatomic, readonly, copy) NSString * _Nullable taxOrExitRequirements;
@property (nonatomic, readonly, copy) NSString * _Nullable personalizationTime;
@property (nonatomic, readonly, copy) NSString * _Nullable personalizationDeviceSerialNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithIssuingAuthority:(NSString * _Nullable)issuingAuthority dateOfIssue:(NSString * _Nullable)dateOfIssue endorsementsOrObservations:(NSString * _Nullable)endorsementsOrObservations taxOrExitRequirements:(NSString * _Nullable)taxOrExitRequirements personalizationTime:(NSString * _Nullable)personalizationTime personalizationDeviceSerialNumber:(NSString * _Nullable)personalizationDeviceSerialNumber OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@class DOTNameOfHolder;

/// Contents of DG11 - Additional personal details.
SWIFT_CLASS_NAMED("AdditionalPersonalDetails") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTAdditionalPersonalDetails : NSObject
@property (nonatomic, readonly, strong) DOTNameOfHolder * _Nullable nameOfHolder;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable otherNames;
@property (nonatomic, readonly, copy) NSString * _Nullable personalNumber;
@property (nonatomic, readonly, copy) NSString * _Nullable fullDateOfBirth;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable placeOfBirth;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable address;
@property (nonatomic, readonly, copy) NSString * _Nullable telephone;
@property (nonatomic, readonly, copy) NSString * _Nullable profession;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) NSString * _Nullable personalSummary;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable otherValidTravelDocumentNumbers;
@property (nonatomic, readonly, copy) NSString * _Nullable custodyInformation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithNameOfHolder:(DOTNameOfHolder * _Nullable)nameOfHolder otherNames:(NSArray<NSString *> * _Nullable)otherNames personalNumber:(NSString * _Nullable)personalNumber fullDateOfBirth:(NSString * _Nullable)fullDateOfBirth placeOfBirth:(NSArray<NSString *> * _Nullable)placeOfBirth address:(NSArray<NSString *> * _Nullable)address telephone:(NSString * _Nullable)telephone profession:(NSString * _Nullable)profession title:(NSString * _Nullable)title personalSummary:(NSString * _Nullable)personalSummary otherValidTravelDocumentNumbers:(NSArray<NSString *> * _Nullable)otherValidTravelDocumentNumbers custodyInformation:(NSString * _Nullable)custodyInformation OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@class DOTNImage;

/// Contents of DG7 - Displayed signature or usual mark.
SWIFT_CLASS_NAMED("DisplayedSignatureOrUsualMark") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTDisplayedSignatureOrUsualMark : NSObject
@property (nonatomic, readonly, strong) DOTNImage * _Nullable displayedSignatureOrUsualMarkImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDisplayedSignatureOrUsualMarkImage:(DOTNImage * _Nullable)displayedSignatureOrUsualMarkImage OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// Class storing the global properties of <code>DotNfc</code> framework.
SWIFT_CLASS("_TtC6DotNfc13DotNfcLibrary")
@interface DotNfcLibrary : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <code>DotNfc</code> framework version.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionName;)
+ (NSString * _Nonnull)versionName SWIFT_WARN_UNUSED_RESULT;
@end


/// Contents of DG2 - Face image.
SWIFT_CLASS_NAMED("EncodedIdentificationFeaturesFace") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTEncodedIdentificationFeaturesFace : NSObject
@property (nonatomic, readonly, strong) DOTNImage * _Nullable faceImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFaceImage:(DOTNImage * _Nullable)faceImage OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@class NSData;

/// This class can parse input data as a flat tag structure which can be present in Data Groups. For example, this class should be able to parse <code>OptionalDetails.content</code> of some documents.
SWIFT_CLASS("_TtC6DotNfc22FlatTagStructureParser") SWIFT_AVAILABILITY(ios,introduced=13)
@interface FlatTagStructureParser : NSObject
/// Parse flat tag structure and return (tag, value) pairs as a dictionary.
/// \param value Input data.
///
///
/// throws:
/// Invalid input structure error.
///
/// returns:
/// Dictionary as a result.
- (NSDictionary<NSNumber *, NSData *> * _Nullable)parseWithValue:(NSData * _Nonnull)value error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DOTImageFormat : NSInteger;
@class DOTNImageSize;

/// Raw image data representation.
SWIFT_CLASS_NAMED("Image") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNImage : NSObject
/// Image data.
@property (nonatomic, readonly, copy) NSData * _Nonnull bytes;
/// Image format.
@property (nonatomic, readonly) enum DOTImageFormat format;
/// Image size.
@property (nonatomic, readonly, strong) DOTNImageSize * _Nonnull size;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithBytes:(NSData * _Nonnull)bytes format:(enum DOTImageFormat)format size:(DOTNImageSize * _Nonnull)size OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/// Supported image formats.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTImageFormat, "ImageFormat", open) {
/// JPEG
  DOTImageFormatJpeg = 0,
/// JPEG2000
  DOTImageFormatJpeg2000 = 1,
};


/// Image size in pixels.
SWIFT_CLASS_NAMED("ImageSize") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNImageSize : NSObject
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly) NSInteger height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithWidth:(NSInteger)width height:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)calculatePixelCount SWIFT_WARN_UNUSED_RESULT;
- (double)calculateWidthToHeightRatio SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class NSBundle;

/// Class responsible for the localization of user interface strings.
SWIFT_CLASS_NAMED("Localization") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DotNfcLocalization : NSObject
/// You can override default iOS localization mechanism by providing custom translation dictionary.
/// note:
/// You also need to set <code>useLocalizationDictionary</code> flag to <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nullable localizationDictionary;)
+ (NSDictionary<NSString *, NSString *> * _Nullable)localizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)value;
/// If you set this to <code>true</code>, <code>localizationDictionary</code> will be used to localize strings. Default value is <code>false</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL useLocalizationDictionary;)
+ (BOOL)useLocalizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setUseLocalizationDictionary:(BOOL)value;
/// Bundle used to localize strings.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setBundle:(NSBundle * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DotNfcLoggerLogLevel : NSInteger;

/// Static class responsible for generating logs. You can configure log level.
SWIFT_CLASS_NAMED("Logger") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DotNfcLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Log level currently in use. Default value is <code>.none</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum DotNfcLoggerLogLevel logLevel;)
+ (enum DotNfcLoggerLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum DotNfcLoggerLogLevel)value;
+ (void)info:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)debug:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)warning:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)error:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
@end

/// Available log levels.
typedef SWIFT_ENUM_NAMED(NSInteger, DotNfcLoggerLogLevel, "LogLevel", open) {
/// Logs informative events.
  DotNfcLoggerLogLevelInfo = 0,
/// Logs events suitable for debugging purposes.
  DotNfcLoggerLogLevelDebug = 1,
/// Logs unexpected events which indicate malfunction.
  DotNfcLoggerLogLevelWarning = 2,
/// Logs failed operations and other errors.
  DotNfcLoggerLogLevelError = 3,
/// Disables logging.
  DotNfcLoggerLogLevelNone = 4,
};


/// Contents of DG1 - Machine readable zone information.
SWIFT_CLASS_NAMED("MachineReadableZoneInformation") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTMachineReadableZoneInformation : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull documentCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull issuingStateOrOrganization;
@property (nonatomic, readonly, strong) DOTNameOfHolder * _Nonnull nameOfHolder;
@property (nonatomic, readonly, copy) NSString * _Nonnull nationality;
@property (nonatomic, readonly, copy) NSString * _Nonnull documentNumber;
@property (nonatomic, readonly, copy) NSString * _Nonnull dateOfBirth;
@property (nonatomic, readonly, copy) NSString * _Nonnull sex;
@property (nonatomic, readonly, copy) NSString * _Nonnull dateOfExpiry;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull optionalData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDocumentCode:(NSString * _Nonnull)documentCode issuingStateOrOrganization:(NSString * _Nonnull)issuingStateOrOrganization nameOfHolder:(DOTNameOfHolder * _Nonnull)nameOfHolder nationality:(NSString * _Nonnull)nationality documentNumber:(NSString * _Nonnull)documentNumber dateOfBirth:(NSString * _Nonnull)dateOfBirth sex:(NSString * _Nonnull)sex dateOfExpiry:(NSString * _Nonnull)dateOfExpiry optionalData:(NSArray<NSString *> * _Nonnull)optionalData OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end




/// Name of the travel document holder.
SWIFT_CLASS_NAMED("NameOfHolder") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNameOfHolder : NSObject
/// Primary identifier, usually represents surname.
@property (nonatomic, readonly, copy) NSString * _Nonnull primaryIdentifier;
/// Secondary identifier, usually represents given names.
@property (nonatomic, readonly, copy) NSString * _Nonnull secondaryIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithPrimaryIdentifier:(NSString * _Nonnull)primaryIdentifier secondaryIdentifier:(NSString * _Nonnull)secondaryIdentifier OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// NFC key created from document number, date of expiry and date of birth.
SWIFT_CLASS_NAMED("NfcKey") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNfcKey : NSObject
/// Document number in MRZ format.
@property (nonatomic, readonly, copy) NSString * _Nonnull documentNumber;
/// Date of expiry in MRZ format [yyMMdd].
@property (nonatomic, readonly, copy) NSString * _Nonnull dateOfExpiry;
/// Date of birth in MRZ format [yyMMdd].
@property (nonatomic, readonly, copy) NSString * _Nonnull dateOfBirth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithDocumentNumber:(NSString * _Nonnull)documentNumber dateOfExpiry:(NSString * _Nonnull)dateOfExpiry dateOfBirth:(NSString * _Nonnull)dateOfBirth error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTNfcTravelDocumentReaderConfiguration;
@protocol DOTNfcTravelDocumentReaderDelegate;

/// Non-UI component for reading travel documents using NFC technology.
SWIFT_CLASS_NAMED("NfcTravelDocumentReader") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNfcTravelDocumentReader : NSObject
/// Current configuration.
@property (nonatomic, readonly, strong) DOTNfcTravelDocumentReaderConfiguration * _Nonnull configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize and configure <code>NfcTravelDocumentReader</code>.
- (nonnull instancetype)initWithConfiguration:(DOTNfcTravelDocumentReaderConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/// Set delegate and <code>DispatchQueue</code> on which you want to recieve the delegate callbacks. <code>DotNfc</code> will hold weak reference to <code>delegate</code> and <code>queue</code>.
- (void)setDelegate:(id <DOTNfcTravelDocumentReaderDelegate> _Nullable)delegate queue:(dispatch_queue_t _Nullable)queue;
/// Read passport using NFC key.
/// You can handle success or failure of NFC reading by implementing the delegate methods.
/// \param nfcKey NFC key created from the document number, date of expiry and date of birth.
///
- (void)readWithNfcKey:(DOTNfcKey * _Nonnull)nfcKey;
@end

@class NSURL;

/// Configuration options for <code>NfcTravelDocumentReader</code>.
SWIFT_CLASS_NAMED("NfcTravelDocumentReaderConfiguration")
@interface DOTNfcTravelDocumentReaderConfiguration : NSObject
/// File URL with Country Signing Certificate Authority (CSCA) certificates in <code>PEM</code> format.
@property (nonatomic, readonly, copy) NSURL * _Nullable authorityCertificatesUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAuthorityCertificatesUrl:(NSURL * _Nullable)authorityCertificatesUrl OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTTravelDocument;
@class DOTNfcTravelDocumentReaderError;

/// Implement this delegate to handle NFC reading events.
SWIFT_PROTOCOL_NAMED("NfcTravelDocumentReaderDelegate") SWIFT_AVAILABILITY(ios,introduced=13)
@protocol DOTNfcTravelDocumentReaderDelegate
/// Tells the delegate that NFC reading has finished successfully with travel document as a result.
- (void)nfcTravelDocumentReader:(DOTNfcTravelDocumentReader * _Nonnull)nfcTravelDocumentReader succeeded:(DOTTravelDocument * _Nonnull)travelDocument;
/// Tells the delegate that NFC reading has failed with an error.
- (void)nfcTravelDocumentReader:(DOTNfcTravelDocumentReader * _Nonnull)nfcTravelDocumentReader failed:(DOTNfcTravelDocumentReaderError * _Nonnull)error;
@end

enum DOTNfcTravelDocumentReaderErrorType : NSInteger;

SWIFT_CLASS_NAMED("NfcTravelDocumentReaderError") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNfcTravelDocumentReaderError : NSObject
@property (nonatomic, readonly) enum DOTNfcTravelDocumentReaderErrorType errorType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DOTNfcTravelDocumentReaderErrorType, "NfcTravelDocumentReaderErrorType", open) {
/// Failed access control indicates that you have invalid NFC key.
  DOTNfcTravelDocumentReaderErrorTypeAccessControlError = 0,
/// An error encountered during the NFC reading process.
  DOTNfcTravelDocumentReaderErrorTypeReadingError = 1,
};


/// Contents of DG13 - Optional details.
SWIFT_CLASS_NAMED("OptionalDetails") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTOptionalDetails : NSObject
@property (nonatomic, readonly, copy) NSData * _Nullable content;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithContent:(NSData * _Nullable)content OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, DOTPassiveAuthenticationStatus, "PassiveAuthenticationStatus", open) {
/// Travel document has passed the Passive Authentication.
  DOTPassiveAuthenticationStatusSuccess = 0,
/// Travel document has not passed the Passive Authentication.
  DOTPassiveAuthenticationStatusFailed = 1,
/// Passive Authentication is not supported for the travel document.
  DOTPassiveAuthenticationStatusNotSupported = 2,
/// Authority certificates were not provided for Passive Authentication of a travel document.
  DOTPassiveAuthenticationStatusAuthorityCertificatesNotProvided = 3,
};


/// Result of NFC reading.
SWIFT_CLASS_NAMED("TravelDocument") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTTravelDocument : NSObject
/// Logical data structure version.
@property (nonatomic, readonly, copy) NSString * _Nonnull ldsVersion;
/// Access Control protocol used to read the document.
@property (nonatomic, readonly) enum DOTAccessControlProtocol accessControlProtocolUsed;
/// Result of Passive Authentication protocol.
@property (nonatomic, readonly) enum DOTPassiveAuthenticationStatus passiveAuthenticationStatus;
/// Result of Active Authentication protocol.
@property (nonatomic, readonly) enum DOTActiveAuthenticationStatus activeAuthenticationStatus;
/// Contents of DG1 - Machine readable zone information.
@property (nonatomic, readonly, strong) DOTMachineReadableZoneInformation * _Nonnull machineReadableZoneInformation;
/// Contents of DG2 - Face image.
@property (nonatomic, readonly, strong) DOTEncodedIdentificationFeaturesFace * _Nullable encodedIdentificationFeaturesFace;
/// Contents of DG7 - Displayed signature or usual mark.
@property (nonatomic, readonly, strong) DOTDisplayedSignatureOrUsualMark * _Nullable displayedSignatureOrUsualMark;
/// Contents of DG11 - Additional personal details.
@property (nonatomic, readonly, strong) DOTAdditionalPersonalDetails * _Nullable additionalPersonalDetails;
/// Contents of DG12 - Additional document details.
@property (nonatomic, readonly, strong) DOTAdditionalDocumentDetails * _Nullable additionalDocumentDetails;
/// Contents of DG13 - Optional details.
@property (nonatomic, readonly, strong) DOTOptionalDetails * _Nullable optionalDetails;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLdsVersion:(NSString * _Nonnull)ldsVersion accessControlProtocolUsed:(enum DOTAccessControlProtocol)accessControlProtocolUsed passiveAuthenticationStatus:(enum DOTPassiveAuthenticationStatus)passiveAuthenticationStatus activeAuthenticationStatus:(enum DOTActiveAuthenticationStatus)activeAuthenticationStatus machineReadableZoneInformation:(DOTMachineReadableZoneInformation * _Nonnull)machineReadableZoneInformation encodedIdentificationFeaturesFace:(DOTEncodedIdentificationFeaturesFace * _Nullable)encodedIdentificationFeaturesFace displayedSignatureOrUsualMark:(DOTDisplayedSignatureOrUsualMark * _Nullable)displayedSignatureOrUsualMark additionalPersonalDetails:(DOTAdditionalPersonalDetails * _Nullable)additionalPersonalDetails additionalDocumentDetails:(DOTAdditionalDocumentDetails * _Nullable)additionalDocumentDetails optionalDetails:(DOTOptionalDetails * _Nullable)optionalDetails OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
